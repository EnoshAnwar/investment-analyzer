{"version":3,"sources":["components/DeleteStockButton.js","components/InterestCalculator.js","libs/storage.js","components/AddStockButton.js","components/Home.js","hooks/useTheme.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","Flex","DeleteStockButton","onClick","IconButton","title","icon","Close","size","ColumnFlex","Container","themeGet","StyledLabel","Label","StyledInput","Input","InputsContainer","StyledInterest","interest","getPaletteColor","ComputedDataContainer","InterestContainer","InterestInput","StockName","formatPrice","price","Number","toFixed","InterestCalculator","index","getStoredData","updateStoredData","onDeleteButtonClick","initialName","initialBuy","initialSell","initialNumOfShares","useState","buy","setBuy","sell","setSell","percentageInterest","setPercentageInterest","dollarInterest","setDollarInterest","totalBuy","setTotalBuy","totalSell","setTotalSell","numOfShares","setNumOfShares","name","setName","useEffect","newInterestRate","updateState","setState","event","target","value","id","type","placeholder","onChange","htmlFor","newDollarInterest","newPercentageInterest","getNum","num","defaultNum","emptyState","StorageContext","createContext","StorageProvider","children","useLocalStorage","storage","setStorage","Provider","updatedStorage","addStock","deleteStock","splice","AddStockButton","Button","variation","width","py","alignItems","Plus","Home","useContext","Heading","h1","map","_","key","themePalettes","dark","palette","text","lightest","light","base","background","border","ThemeSwitcher","StyledIcon","img","ThemeProvider","MainContent","main","App","initialTheme","theme","setTheme","isDark","toggleTheme","themeToggleButton","src","process","alt","useTheme","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mcAKA,IAAMA,EAAUC,kBAAOC,IAAPD,CAAH,KAeEE,EAVW,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACxB,kBAACJ,EAAD,KACE,kBAACK,EAAA,EAAD,CACED,QAASA,EACTE,MAAM,eACNC,KAAM,kBAACC,EAAA,EAAD,CAAOC,KAAM,S,6rCCTzB,IAAMC,EAAaT,kBAAOC,IAAPD,CAAH,KAIVU,EAAYV,kBAAOC,IAAPD,CAAH,IAIIW,YAAS,YAGtBC,EAAcZ,kBAAOa,IAAPb,CAAH,IAEFW,YAAS,gBAGlBG,EAAcd,kBAAOe,IAAPf,CAAH,IACFW,YAAS,eACXA,YAAS,YAGhBK,EAAkBhB,kBAAOS,EAAPT,CAAH,KAKfiB,EAAiBjB,kBAAOC,IAAPD,CAAH,KAGT,gBAAGkB,EAAH,EAAGA,SAAH,OACM,IAAbA,EACIC,YAAgB,aAChBD,EAAW,EACXC,YAAgB,kBAChB,SAGFC,EAAwBpB,kBAAOC,IAAPD,CAAH,IAEZW,YAAS,gBAGlBU,EAAoBrB,kBAAOC,IAAPD,CAAH,IAEPW,YAAS,YAGnBW,EAAgBtB,kBAAOc,EAAPd,CAAH,KAKbuB,EAAYvB,kBAAOC,IAAPD,CAAH,IAEKmB,YAAgB,oBAK9BK,EAAc,SAACC,GAAD,OAAWC,OAAOD,EAAME,QAAQ,KAqIrCC,MAnIf,YAKI,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,oBACC,EAECF,EAAcD,GADRI,EADP,EACOA,YAAaC,EADpB,EACoBA,WAAYC,EADhC,EACgCA,YAAaC,EAD7C,EAC6CA,mBAD7C,EAIqBC,mBAASH,GAJ9B,mBAIMI,EAJN,KAIWC,EAJX,OAKuBF,mBAASF,GALhC,mBAKMK,EALN,KAKYC,EALZ,OAMmDJ,mBAAS,GAN5D,mBAMMK,EANN,KAM0BC,EAN1B,OAO2CN,mBAAS,GAPpD,mBAOMO,EAPN,KAOsBC,EAPtB,OAS+BR,mBAAS,GATxC,mBASMS,EATN,KASgBC,EAThB,OAUiCV,mBAAS,GAV1C,mBAUMW,EAVN,KAUiBC,EAVjB,OAWqCZ,mBAASD,GAX9C,mBAWMc,EAXN,KAWmBC,EAXnB,OAY4Bd,mBAASJ,GAZrC,6BAYMmB,QAZN,OAYa,GAZb,GAYiBC,GAZjB,MAcDC,qBAAU,WAGR,GAFAvB,EAAiB,CAAEF,QAAOuB,QAAMF,cAAaZ,MAAKE,SAE7CF,GAAQE,EAIN,CACL,IAAMe,GAAmBf,EAAOF,GAAOA,EACjCQ,EAAWR,EAAMY,EACjBF,GAAaV,EAAMiB,EAAkB7B,OAAOY,IAAQY,EAE1DP,EAAsBnB,EAA8B,IAAlB+B,IAClCV,EAAkBrB,EAAYwB,EAAYF,IAC1CC,EAAYvB,EAAYsB,IACxBG,EAAazB,EAAYwB,SAXzBL,EAAsB,GACtBI,EAAY,GACZE,EAAa,KAYd,CAACX,EAAKE,EAAMU,EAAaE,KAE5B,IAAMI,GAAc,SAACC,EAAUC,GAC7BD,EAASC,EAAMC,OAAOC,QAkBxB,OACE,kBAAClD,EAAD,KACE,kBAACM,EAAD,KACE,kBAACO,EAAD,KACE,kBAACT,EAAD,CACE+C,GAAG,aACHT,KAAK,aACLU,KAAK,OACLF,MAAOR,GACPW,YAAY,oBACZC,SAAU,SAACN,GAAD,OAAWF,GAAYH,GAASK,OAI9C,kBAAC9C,EAAD,CAAaqD,QAAQ,UAArB,UACA,kBAACnD,EAAD,CACE+C,GAAG,SACHT,KAAK,SACLU,KAAK,SACLF,MAAOV,EACPc,SAAU,SAACN,GAAD,OAAWF,GAAYL,EAAgBO,MAGnD,kBAAC9C,EAAD,CAAaqD,QAAQ,OAArB,UACA,kBAACnD,EAAD,CACE+C,GAAG,MACHT,KAAK,MACLU,KAAK,SACLF,MAAOtB,GAAO,GACd0B,SAAU,SAACN,GAAD,OAAWF,GAAYjB,EAAQmB,MAG3C,kBAAC9C,EAAD,gBACA,kBAACE,EAAD,CACE+C,GAAG,OACHT,KAAK,OACLU,KAAK,SACLF,MAAOpB,GAAQ,GACfwB,SAAU,SAACN,GAAD,OAAWF,GAAYf,EAASiB,OAG9C,kBAACtC,EAAD,KACE,kBAACnB,EAAA,EAAD,oBAAmB6C,GACnB,kBAAC7C,EAAA,EAAD,qBAAoB+C,GACpB,kBAAC3B,EAAD,iBAEE,kBAACJ,EAAD,CAAgBC,SAAU0B,GACxB,kBAACtB,EAAD,CACEuC,GAAG,iBACHT,KAAK,iBACLU,KAAK,SACLF,MAAOhB,GAAkB,GACzBoB,SA5DmB,SAACN,GAC9B,IAAMQ,EAAoBxC,OAAOgC,EAAMC,OAAOC,OACxClB,EAAqBwB,GAAqB5B,EAAMY,GAAe,EAErEL,EAAkBqB,GAClBzB,EAAQH,EAAMI,MAiDR,KAUA,kBAACzB,EAAD,CAAgBC,SAAU0B,GACxB,kBAACtB,EAAD,CACEuC,GAAG,qBACHT,KAAK,qBACLU,KAAK,SACLF,MAAOlB,GAAsB,GAC7BsB,SA7EuB,SAACN,GAClC,IAAMS,EAAwBzC,OAAOgC,EAAMC,OAAOC,OAElDjB,EAAsBwB,GACtB1B,EAAQjB,EAAYc,GAAO,EAAI6B,EAAwB,UAmEjD,OAYHtC,EAAQ,GAAK,kBAAC,EAAD,CAAmB1B,QAAS6B,M,gCC5L1CoC,EAAS,SAACC,GAAyB,IAApBC,EAAmB,uDAAN,EAChC,OAAO5C,OAAO2C,IAAQC,GAGlBC,EAAa,CAAEnB,KAAM,GAAIF,YAAa,EAAGZ,IAAK,EAAGE,KAAM,GAEhDgC,EAAiBC,wBAAc,IAE/BC,EAAkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACjBC,YAXN,aAWyC,CAAC,eAC3DL,KAFwC,mBACxCM,EADwC,KAC/BC,EAD+B,KAwC/C,OACE,kBAACN,EAAeO,SAAhB,CACEnB,MAAO,CACLiB,UACA/C,cAvCgB,SAACD,GAAW,IAAD,qBACUgD,QADV,IACUA,OADV,EACUA,EAAUhD,UADpB,QAC8B,GAArDuB,EADuB,EACvBA,KAAMF,EADiB,EACjBA,YAAaZ,EADI,EACJA,IAAKE,EADD,EACCA,KAChC,MAAO,CACLP,YAAamB,EACblB,WAAYkC,EAAO9B,GACnBH,YAAaiC,EAAO5B,GACpBJ,mBAAoBgC,EAAOlB,EAAa,KAkCtCnB,iBAlBmB,SAAC,GAA6C,IAA3CF,EAA0C,EAA1CA,MAAOuB,EAAmC,EAAnCA,KAAMF,EAA6B,EAA7BA,YAAaZ,EAAgB,EAAhBA,IAAKE,EAAW,EAAXA,KACnDwC,EAAc,YAAOH,GAE3BG,EAAenD,GAAS,CACtBuB,OACAF,cACAZ,MACAE,QAGFsC,EAAWE,IASPC,SA/BW,WACf,IAAMD,EAAc,sBAAOH,GAAP,gBAAqBN,KACzCO,EAAWE,IA8BPE,YA3Bc,SAACrD,GACnB,IAAMmD,EAAc,YAAOH,GAC3BG,EAAeG,OAAOtD,EAAO,GAE7BiD,EAAWE,MA0BRL,I,gBClDQS,EATQ,SAAC,GAAD,IAAGjF,EAAH,EAAGA,QAAH,OACrB,kBAACkF,EAAA,EAAD,CAAQlF,QAASA,EAASmF,UAAU,UAAUC,MAAM,cAAcC,GAAI,GACpE,kBAACvF,EAAA,EAAD,CAAMwF,WAAW,UAAjB,YAEE,kBAACC,EAAA,EAAD,CAAMlF,KAAM,Q,4JCDlB,IAAME,GAAYV,kBAAOC,IAAPD,CAAH,MA8BA2F,OArBf,WAAiB,IAAD,EFoDgBC,qBAAWpB,GEnDjCK,EADM,EACNA,QAASI,EADH,EACGA,SAAUC,EADb,EACaA,YAAapD,EAD1B,EAC0BA,cAAeC,EADzC,EACyCA,iBAGvD,OACE,kBAAC,GAAD,KACE,kBAAC8D,EAAA,EAAQC,GAAT,4BACCjB,EAAQkB,KAAI,SAACC,EAAGnE,GAAJ,OACX,kBAAC,EAAD,CACEoE,IAAKpE,EACLA,MAAOA,EACPC,cAAeA,EACfC,iBAAkBA,EAClBC,oBAAqB,kBAAMkD,EAAYrD,SAG3C,kBAAC,EAAD,CAAgB1B,QAAS8E,M,4QC5B/B,IAAMiB,GAAgB,CACpBC,KAAM,CACJC,QAAS,CACPC,KAAM,CACJC,SAAU,OACVC,MAAO,OACPC,KAAM,QAERC,WAAY,CACVH,SAAU,mBAEZI,OAAQ,CACNJ,SAAU,kBACVC,MAAO,WAMTI,GAAgB3G,kBAAOqF,IAAPrF,CAAH,KAEHmB,YAAgB,gBAO1ByF,GAAa5G,UAAO6G,IAAV,M,uWCzBhB,IAAMnG,GAAYV,kBAAO8G,IAAP9G,CAAH,KAKCmB,YAAgB,wBAG1B4F,GAAc/G,UAAOgH,KAAV,KAIN7F,YAAgB,aACXA,YAAgB,wBAkBjB8F,OAff,WAAgB,IAAD,EDaA,WAA0C,IAAxBC,EAAuB,uDAAR,OAAQ,EAC5B7E,mBAAS6D,GAAcgB,IADK,mBAC/CC,EAD+C,KACxCC,EADwC,KAEhDC,EAASF,IAAUjB,GAAa,KAEhCoB,EAAc,WAClBF,EAASlB,GAAcmB,EAAS,QAAU,UAGtCE,EACJ,kBAACZ,GAAD,CAAexG,QAASmH,GACtB,kBAACV,GAAD,CACEY,IAAG,UAAKC,uBAAL,kBAAqCJ,EAAS,MAAQ,OAAtD,QACHK,IAAI,kBAKV,MAAO,CACLP,QACAI,qBC/BmCI,GAA7BR,EADK,EACLA,MAAOI,EADF,EACEA,kBAEf,OACE,kBAAC,GAAD,CAAWJ,MAAOA,GACfI,EACD,kBAACR,GAAD,KACE,kBAAC,EAAD,KACE,kBAAC,GAAD,U,MCnBUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a9df102.chunk.js","sourcesContent":["import React from 'react';\nimport { IconButton, Flex } from 'pcln-design-system';\nimport { Close } from 'pcln-icons';\nimport styled from 'styled-components';\n\nconst Wrapper = styled(Flex)`\n  justify-content: flex-start;\n  padding-bottom: 180px;\n`;\n\nconst DeleteStockButton = ({ onClick }) => (\n  <Wrapper>\n    <IconButton\n      onClick={onClick}\n      title=\"Remove Stock\"\n      icon={<Close size={20} />}\n    />\n  </Wrapper>\n);\n\nexport default DeleteStockButton;\n","import { themeGet } from '@styled-system/theme-get';\nimport { Flex, getPaletteColor, Input, Label } from 'pcln-design-system';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport DeleteStockButton from './DeleteStockButton';\n\nconst ColumnFlex = styled(Flex)`\n  flex-direction: column;\n`;\n\nconst Container = styled(Flex)`\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: ${themeGet('space.4')}px;\n`;\n\nconst StyledLabel = styled(Label)`\n  margin: 10px 0 5px;\n  font-size: ${themeGet('fontSizes.2')}px;\n`;\n\nconst StyledInput = styled(Input)`\n  font-size: ${themeGet('fontSizes.2')}px;\n  padding: ${themeGet('space.2')}px;\n`;\n\nconst InputsContainer = styled(ColumnFlex)`\n  margin-right: 15px;\n  width: 100%;\n`;\n\nconst StyledInterest = styled(Flex)`\n  margin-left: 4px;\n  align-items: center;\n  color: ${({ interest }) =>\n    interest === 0\n      ? getPaletteColor('text.base')\n      : interest > 0\n      ? getPaletteColor('secondary.base')\n      : 'red'};\n`;\n\nconst ComputedDataContainer = styled(Flex)`\n  flex-direction: column;\n  font-size: ${themeGet('fontSizes.2')}px;\n`;\n\nconst InterestContainer = styled(Flex)`\n  flex-direction: column;\n  margin-top: ${themeGet('space.2')}px;\n`;\n\nconst InterestInput = styled(StyledInput)`\n  width: 100px;\n  margin-right: 5px;\n`;\n\nconst StockName = styled(Flex)`\n  input {\n    border-color: ${getPaletteColor('border.lightest')};\n    font-weight: bold;\n  }\n`;\n\nconst formatPrice = (price) => Number(price.toFixed(5));\n\nfunction InterestCalculator({\n  index,\n  getStoredData,\n  updateStoredData,\n  onDeleteButtonClick\n}) {\n  const { initialName, initialBuy, initialSell, initialNumOfShares } =\n    getStoredData(index);\n\n  const [buy, setBuy] = useState(initialBuy);\n  const [sell, setSell] = useState(initialSell);\n  const [percentageInterest, setPercentageInterest] = useState(0);\n  const [dollarInterest, setDollarInterest] = useState(0);\n\n  const [totalBuy, setTotalBuy] = useState(0);\n  const [totalSell, setTotalSell] = useState(0);\n  const [numOfShares, setNumOfShares] = useState(initialNumOfShares);\n  const [name = '', setName] = useState(initialName);\n\n  useEffect(() => {\n    updateStoredData({ index, name, numOfShares, buy, sell });\n\n    if (!buy || !sell) {\n      setPercentageInterest(0);\n      setTotalBuy(0);\n      setTotalSell(0);\n    } else {\n      const newInterestRate = (sell - buy) / buy;\n      const totalBuy = buy * numOfShares;\n      const totalSell = (buy * newInterestRate + Number(buy)) * numOfShares;\n\n      setPercentageInterest(formatPrice(newInterestRate * 100));\n      setDollarInterest(formatPrice(totalSell - totalBuy));\n      setTotalBuy(formatPrice(totalBuy));\n      setTotalSell(formatPrice(totalSell));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [buy, sell, numOfShares, name]);\n\n  const updateState = (setState, event) => {\n    setState(event.target.value);\n  };\n\n  const onPercentageInterestChange = (event) => {\n    const newPercentageInterest = Number(event.target.value);\n\n    setPercentageInterest(newPercentageInterest);\n    setSell(formatPrice(buy * (1 + newPercentageInterest / 100)));\n  };\n\n  const onDollarInterestChange = (event) => {\n    const newDollarInterest = Number(event.target.value);\n    const percentageInterest = newDollarInterest / (buy * numOfShares) + 1;\n\n    setDollarInterest(newDollarInterest);\n    setSell(buy * percentageInterest);\n  };\n\n  return (\n    <Container>\n      <InputsContainer>\n        <StockName>\n          <StyledInput\n            id=\"stock-name\"\n            name=\"stock-name\"\n            type=\"text\"\n            value={name}\n            placeholder=\"Enter Name/Ticker\"\n            onChange={(event) => updateState(setName, event)}\n          />\n        </StockName>\n\n        <StyledLabel htmlFor=\"shares\">Shares</StyledLabel>\n        <StyledInput\n          id=\"shares\"\n          name=\"shares\"\n          type=\"number\"\n          value={numOfShares}\n          onChange={(event) => updateState(setNumOfShares, event)}\n        />\n\n        <StyledLabel htmlFor=\"buy\">Buy at</StyledLabel>\n        <StyledInput\n          id=\"buy\"\n          name=\"buy\"\n          type=\"number\"\n          value={buy || ''}\n          onChange={(event) => updateState(setBuy, event)}\n        />\n\n        <StyledLabel>Sell at</StyledLabel>\n        <StyledInput\n          id=\"sell\"\n          name=\"sell\"\n          type=\"number\"\n          value={sell || ''}\n          onChange={(event) => updateState(setSell, event)}\n        />\n      </InputsContainer>\n      <ComputedDataContainer>\n        <Flex>Buy Price: ${totalBuy}</Flex>\n        <Flex>Sell Price: ${totalSell}</Flex>\n        <InterestContainer>\n          Interest:\n          <StyledInterest interest={dollarInterest}>\n            <InterestInput\n              id=\"dollarInterest\"\n              name=\"dollarInterest\"\n              type=\"number\"\n              value={dollarInterest || ''}\n              onChange={onDollarInterestChange}\n            />\n            $\n          </StyledInterest>\n          <StyledInterest interest={dollarInterest}>\n            <InterestInput\n              id=\"percentageInterest\"\n              name=\"percentageInterest\"\n              type=\"number\"\n              value={percentageInterest || ''}\n              onChange={onPercentageInterestChange}\n            />\n            %\n          </StyledInterest>\n        </InterestContainer>\n      </ComputedDataContainer>\n      {index > 0 && <DeleteStockButton onClick={onDeleteButtonClick} />}\n    </Container>\n  );\n}\n\nexport default InterestCalculator;\n","import React, { createContext, useContext } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nconst LOCAL_STORAGE_KEY = 'invInfo-v2';\n\nconst getNum = (num, defaultNum = 0) => {\n  return Number(num) || defaultNum;\n};\n\nconst emptyState = { name: '', numOfShares: 1, buy: 0, sell: 0 };\n\nexport const StorageContext = createContext({});\n\nexport const StorageProvider = ({ children }) => {\n  const [storage, setStorage] = useLocalStorage(LOCAL_STORAGE_KEY, [\n    { ...emptyState }\n  ]);\n\n  const getStoredData = (index) => {\n    const { name, numOfShares, buy, sell } = storage?.[index] ?? {};\n    return {\n      initialName: name,\n      initialBuy: getNum(buy),\n      initialSell: getNum(sell),\n      initialNumOfShares: getNum(numOfShares, 1)\n    };\n  };\n\n  const addStock = () => {\n    const updatedStorage = [...storage, { ...emptyState }];\n    setStorage(updatedStorage);\n  };\n\n  const deleteStock = (index) => {\n    const updatedStorage = [...storage];\n    updatedStorage.splice(index, 1);\n\n    setStorage(updatedStorage);\n  };\n\n  const updateStoredData = ({ index, name, numOfShares, buy, sell }) => {\n    const updatedStorage = [...storage];\n\n    updatedStorage[index] = {\n      name,\n      numOfShares,\n      buy,\n      sell\n    };\n\n    setStorage(updatedStorage);\n  };\n\n  return (\n    <StorageContext.Provider\n      value={{\n        storage,\n        getStoredData,\n        updateStoredData,\n        addStock,\n        deleteStock\n      }}\n    >\n      {children}\n    </StorageContext.Provider>\n  );\n};\n\nexport const useStorage = () => useContext(StorageContext);\n","import React from 'react';\nimport { Flex, Button } from 'pcln-design-system';\nimport { Plus } from 'pcln-icons';\n\nconst AddStockButton = ({ onClick }) => (\n  <Button onClick={onClick} variation=\"outline\" width=\"fit-content\" py={0}>\n    <Flex alignItems=\"center\">\n      Add Stock\n      <Plus size={40} />\n    </Flex>\n  </Button>\n);\n\nexport default AddStockButton;\n","import React from 'react';\nimport InterestCalculator from './InterestCalculator';\nimport { Heading, Flex } from 'pcln-design-system';\nimport styled from 'styled-components';\nimport { useStorage } from '../libs/storage';\nimport AddStockButton from './AddStockButton';\n\nconst Container = styled(Flex)`\n  flex-direction: column;\n  width: 100%;\n\n  h1 {\n    text-align: center;\n  }\n`;\n\nfunction Home() {\n  const { storage, addStock, deleteStock, getStoredData, updateStoredData } =\n    useStorage();\n\n  return (\n    <Container>\n      <Heading.h1>Investment Analyzer</Heading.h1>\n      {storage.map((_, index) => (\n        <InterestCalculator\n          key={index}\n          index={index}\n          getStoredData={getStoredData}\n          updateStoredData={updateStoredData}\n          onDeleteButtonClick={() => deleteStock(index)}\n        />\n      ))}\n      <AddStockButton onClick={addStock} />\n    </Container>\n  );\n}\n\nexport default Home;\n","import React, { useState } from 'react';\nimport { Button, getPaletteColor } from 'pcln-design-system';\nimport styled from 'styled-components';\n\nconst themePalettes = {\n  dark: {\n    palette: {\n      text: {\n        lightest: '#fff',\n        light: '#fff',\n        base: '#fff'\n      },\n      background: {\n        lightest: 'rgb(23, 25, 35)'\n      },\n      border: {\n        lightest: 'rgb(23, 25, 35)',\n        light: '#fff'\n      }\n    }\n  }\n};\n\nconst ThemeSwitcher = styled(Button)`\n  position: absolute;\n  background: ${getPaletteColor('border.base')};\n  color: white;\n  top: 0;\n  right: 0;\n  padding: 6px 10px;\n`;\n\nconst StyledIcon = styled.img`\n  width: 30px;\n`;\n\nexport default function useTheme(initialTheme = 'dark') {\n  const [theme, setTheme] = useState(themePalettes[initialTheme]);\n  const isDark = theme === themePalettes['dark'];\n\n  const toggleTheme = () => {\n    setTheme(themePalettes[isDark ? 'light' : 'dark']);\n  };\n\n  const themeToggleButton = (\n    <ThemeSwitcher onClick={toggleTheme}>\n      <StyledIcon\n        src={`${process.env.PUBLIC_URL}/icons/${isDark ? 'sun' : 'moon'}.svg`}\n        alt=\"Theme toggle\"\n      />\n    </ThemeSwitcher>\n  );\n\n  return {\n    theme,\n    themeToggleButton\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ThemeProvider, getPaletteColor } from 'pcln-design-system';\nimport Home from './components/Home';\nimport useTheme from './hooks/useTheme';\nimport { StorageProvider } from './libs/storage';\n\nconst Container = styled(ThemeProvider)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  min-height: 100vh;\n  background: ${getPaletteColor('background.lightest')};\n`;\n\nconst MainContent = styled.main`\n  display: flex;\n  align-items: center;\n  padding: 100px 10% 0;\n  color: ${getPaletteColor('text.base')};\n  background: ${getPaletteColor('background.lightest')};\n`;\n\nfunction App() {\n  const { theme, themeToggleButton } = useTheme();\n\n  return (\n    <Container theme={theme}>\n      {themeToggleButton}\n      <MainContent>\n        <StorageProvider>\n          <Home />\n        </StorageProvider>\n      </MainContent>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'typeface-montserrat';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}